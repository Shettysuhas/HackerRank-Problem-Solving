#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'cavityMap' function below.
#
# The function is expected to return a STRING_ARRAY.
# The function accepts STRING_ARRAY grid as parameter.
#

def cavityMap(grid):
    g=[]
    g.append(grid[0])
    if len(grid)==1:
        return grid[0]
    for i in range(0,len(grid)-2):
        j=1
        p=1
        print(i)
        print(i+2)
        a=grid[i]
        b=grid[i+1]
        d=grid[i+1]
        c=grid[i+2]
        print(a,b,c)
        while j>0 and j<len(grid)-1:
            if int(b[j])>int(b[j-1]) and int(b[j])>int(b[j+1]) and int(b[j])>int(a[j]) and int(b[j])>int(c[j]):
                print(b[j],c[j],a[j])
                print(1)
                # h=b.replace(b[j],'X')
                d=d[0:j]+'X'+b[j+1:len(b)]
                print(d)
                
                # g.append(d)
                p=0
            
            j+=1
        if p!=0:
            g.append(b)
        else:
            g.append(d)
    g.append(grid[len(grid)-1])
    return(g)
            
            
            

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    grid = []

    for _ in range(n):
        grid_item = input()
        grid.append(grid_item)

    result = cavityMap(grid)

    fptr.write('\n'.join(result))
    fptr.write('\n')

    fptr.close()
